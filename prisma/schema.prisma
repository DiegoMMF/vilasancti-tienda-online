// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id          String   @id @default(cuid())
  handle      String   @unique
  title       String
  description String
  descriptionHtml String
  availableForSale Boolean @default(true)
  tags        String   // JSON string of tags
  seoTitle    String?
  seoDescription String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  variants    ProductVariant[]
  images      ProductImage[]
  collections ProductCollection[]

  @@map("products")
}

model ProductVariant {
  id        String   @id @default(cuid())
  title     String
  price     Decimal  @db.Decimal(10, 2)
  currencyCode String @default("USD")
  availableForSale Boolean @default(true)
  selectedOptions String // JSON string of selected options
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Relations
  cartItems CartItem[]

  @@map("product_variants")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  altText   String?
  width     Int      @default(800)
  height    Int      @default(600)
  isFeatured Boolean @default(false)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Collection {
  id          String   @id @default(cuid())
  handle      String   @unique
  title       String
  description String?
  seoTitle    String?
  seoDescription String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products    ProductCollection[]

  @@map("collections")
}

model ProductCollection {
  id           String     @id @default(cuid())
  productId    String
  collectionId String
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([productId, collectionId])
  @@map("product_collections")
}

model Cart {
  id        String   @id @default(cuid())
  sessionId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id           String   @id @default(cuid())
  quantity     Int
  cartId       String
  variantId    String
  cart         Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant      ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([cartId, variantId])
  @@map("cart_items")
} 